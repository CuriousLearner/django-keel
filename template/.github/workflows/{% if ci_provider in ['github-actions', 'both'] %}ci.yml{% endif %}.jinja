name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
{% if dependency_manager == 'uv' %}
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install {{ python_version }}

      - name: Install dependencies
        run: uv sync

      - name: Lint with ruff
        run: uv run ruff check .

      - name: Check formatting
        run: uv run ruff format --check .

      - name: Type check with mypy
        run: uv run mypy .
{% else %}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "{{ python_version }}"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Lint with ruff
        run: poetry run ruff check .

      - name: Check formatting
        run: poetry run ruff format --check .

      - name: Type check with mypy
        run: poetry run mypy .
{% endif %}

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
{% if cache == 'redis' %}
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
{% endif %}

    steps:
      - uses: actions/checkout@v4
{% if dependency_manager == 'uv' %}
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install {{ python_version }}

      - name: Install dependencies
        run: uv sync

      - name: Check for missing migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
{% if cache == 'redis' %}
          REDIS_URL: redis://localhost:6379/0
{% endif %}
        run: uv run python manage.py makemigrations --check --dry-run

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
{% if cache == 'redis' %}
          REDIS_URL: redis://localhost:6379/0
{% endif %}
        run: uv run pytest --cov --cov-report=xml
{% else %}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "{{ python_version }}"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Check for missing migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
{% if cache == 'redis' %}
          REDIS_URL: redis://localhost:6379/0
{% endif %}
        run: poetry run python manage.py makemigrations --check --dry-run

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
{% if cache == 'redis' %}
          REDIS_URL: redis://localhost:6379/0
{% endif %}
        run: poetry run pytest --cov --cov-report=xml
{% endif %}

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: {{ project_slug }}:{% raw %}${{ github.sha }}{% endraw %}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: {{ project_slug }}:{% raw %}${{ github.sha }}{% endraw %}

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: {{ project_slug }}:{% raw %}${{ github.sha }}{% endraw %}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
