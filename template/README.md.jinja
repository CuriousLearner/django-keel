# {{ project_name }}

{{ project_description }}

## Features

- **Django {{ '5.2' }}** with Python {{ python_version }}
- **Package Management**: {{ dependency_manager }}
- **Database**: {{ database }}
{% if cache == 'redis' -%}
- **Cache**: Redis
{% endif -%}
{% if api_style != 'none' -%}
- **API**: {% if api_style == 'drf' %}Django REST Framework{% elif api_style == 'graphql-strawberry' %}Strawberry GraphQL{% else %}DRF + Strawberry GraphQL{% endif %}
{% endif -%}
{% if frontend != 'none' -%}
- **Frontend**: {% if frontend == 'htmx-tailwind' %}HTMX + Tailwind CSS{% else %}Next.js{% endif %}
{% endif -%}
{% if use_celery -%}
- **Background Tasks**: Celery with Redis broker
{% endif -%}
{% if use_channels -%}
- **WebSockets**: Django Channels
{% endif -%}
- **Authentication**: {% if auth_backend == 'allauth' %}django-allauth{% elif auth_backend == 'jwt' %}JWT{% else %}django-allauth + JWT{% endif %}
{% if use_2fa -%}
- **2FA**: TOTP-based two-factor authentication
{% endif -%}
{% if observability_level != 'minimal' -%}
- **Observability**: {% if observability_level == 'standard' %}Structured logging + Sentry{% else %}OpenTelemetry + Prometheus + Grafana + Sentry{% endif %}
{% endif -%}
{% if 'render' in deployment_targets or 'flyio' in deployment_targets or 'aws-ecs-fargate' in deployment_targets or 'docker' in deployment_targets or 'aws-ec2-ansible' in deployment_targets or 'kubernetes' in deployment_targets -%}
- **Deployment**: {% if 'render' in deployment_targets %}Render (PaaS){% endif %}{% if 'flyio' in deployment_targets %}{% if 'render' in deployment_targets %}, {% endif %}Fly.io (Global Edge){% endif %}{% if 'aws-ecs-fargate' in deployment_targets %}{% if 'render' in deployment_targets or 'flyio' in deployment_targets %}, {% endif %}AWS ECS Fargate{% endif %}{% if 'docker' in deployment_targets %}{% if 'render' in deployment_targets or 'flyio' in deployment_targets or 'aws-ecs-fargate' in deployment_targets %}, {% endif %}Docker{% endif %}{% if 'aws-ec2-ansible' in deployment_targets %}{% if 'render' in deployment_targets or 'flyio' in deployment_targets or 'aws-ecs-fargate' in deployment_targets or 'docker' in deployment_targets %}, {% endif %}AWS EC2 (Ansible){% endif %}{% if 'kubernetes' in deployment_targets %}{% if 'render' in deployment_targets or 'flyio' in deployment_targets or 'aws-ecs-fargate' in deployment_targets or 'docker' in deployment_targets or 'aws-ec2-ansible' in deployment_targets %}, {% endif %}Kubernetes{% endif %}
{% endif %}
## Quick Start

### Prerequisites

{% if dependency_manager == 'uv' -%}
- Python {{ python_version }}+
- [uv](https://docs.astral.sh/uv/) package manager
{% else -%}
- Python {{ python_version }}+
- [Poetry](https://python-poetry.org/)
{% endif -%}
- Docker and Docker Compose
{% if 'kubernetes' in deployment_targets -%}
- kubectl (for Kubernetes deployment)
- Helm 3+ (for Kubernetes deployment)
{% endif -%}
{% if 'aws-ec2-ansible' in deployment_targets -%}
- Ansible (for EC2 deployment)
{% endif %}
### Development Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/CuriousLearner/django-keel
   cd {{ project_slug }}
   ```

2. **Install dependencies**
   {% if dependency_manager == 'uv' -%}
   ```bash
   uv sync
   ```
   {% else -%}
   ```bash
   poetry install
   ```
   {% endif -%}

3. **Set up environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your settings
   ```

4. **Start development services**
   ```bash
   docker compose up -d
   ```

5. **Run migrations**
   ```bash
   {% if dependency_manager == 'uv' -%}
   uv run python manage.py migrate
   {% else -%}
   poetry run python manage.py migrate
   {% endif -%}
   ```

6. **Create superuser**
   ```bash
   {% if dependency_manager == 'uv' -%}
   uv run python manage.py createsuperuser
   {% else -%}
   poetry run python manage.py createsuperuser
   {% endif -%}
   ```

7. **Start development server**
   ```bash
   {% if dependency_manager == 'uv' -%}
   uv run python manage.py runserver
   {% else -%}
   poetry run python manage.py runserver
   {% endif -%}
   ```

### Using Justfile (Recommended)

We provide a `Justfile` for common tasks:

```bash
# Install just: https://github.com/casey/just
just --list              # Show all available commands
just dev                 # Start development server
just test                # Run tests
just lint                # Run linters
just format              # Format code
just migrate             # Run migrations
just shell               # Open Django shell
```

## Project Structure

```
{{ project_slug }}/
â”œâ”€â”€ apps/                      # Django applications
â”‚   â”œâ”€â”€ core/                 # Core app (health checks, utils)
â”‚   â”œâ”€â”€ users/                # User model and authentication
{% if api_style != 'none' -%}
â”‚   â””â”€â”€ api/                  # API endpoints
{% endif -%}
â”œâ”€â”€ config/                    # Project configuration
â”‚   â”œâ”€â”€ settings/             # Split settings (base, dev, test, prod)
â”‚   â”œâ”€â”€ urls.py
â”‚   â”œâ”€â”€ asgi.py
â”‚   â””â”€â”€ wsgi.py
â”œâ”€â”€ static/                    # Static files
â”œâ”€â”€ media/                     # Media uploads
â”œâ”€â”€ docs/                      # Documentation (MkDocs)
â”‚   â””â”€â”€ adr/                  # Architecture Decision Records
{% if 'kubernetes' in deployment_targets -%}
â”œâ”€â”€ deploy/
â”‚   â””â”€â”€ k8s/                  # Kubernetes manifests
â”‚       â”œâ”€â”€ helm/             # Helm charts
â”‚       â””â”€â”€ kustomize/        # Kustomize overlays
{% endif -%}
{% if 'aws-ec2-ansible' in deployment_targets -%}
â”‚   â””â”€â”€ ansible/              # Ansible playbooks
{% endif -%}
{% if ci_provider in ['github-actions', 'both'] -%}
â”œâ”€â”€ .github/
â”‚   â””â”€â”€ workflows/            # GitHub Actions
{% endif -%}
{% if ci_provider in ['gitlab-ci', 'both'] -%}
â”œâ”€â”€ .gitlab-ci.yml            # GitLab CI
{% endif -%}
â”œâ”€â”€ tests/                     # Test files
â”œâ”€â”€ Dockerfile                 # Production Docker image
â”œâ”€â”€ docker-compose.yml         # Development environment
â”œâ”€â”€ Justfile                   # Task runner
â”œâ”€â”€ pyproject.toml            # Python dependencies and config
â””â”€â”€ README.md                 # This file
```

## Development

### Running Tests

```bash
just test
# or
{% if dependency_manager == 'uv' -%}
uv run pytest
{% else -%}
poetry run pytest
{% endif -%}
```

### Code Quality

```bash
# Format code
just format

# Lint code
just lint

# Type check
just typecheck
```

### Database Migrations

```bash
# Create migrations
just makemigrations

# Apply migrations
just migrate

# Check for migration issues
just migrate-check
```
{% if use_celery %}
### Background Tasks

Start Celery worker:
```bash
just celery-worker
```

Start Celery beat (periodic tasks):
```bash
just celery-beat
```

Monitor tasks with Flower:
```bash
just celery-flower
```
{% endif %}

## Deployment

Detailed deployment guides are available in `docs/deployment/`:

{% if 'render' in deployment_targets -%}
- **[Render](docs/deployment/render.md)**: Zero-config PaaS with `render.yaml`
{% endif -%}
{% if 'flyio' in deployment_targets -%}
- **[Fly.io](docs/deployment/flyio.md)**: Global edge deployment with `fly.toml`
{% endif -%}
{% if 'aws-ecs-fargate' in deployment_targets -%}
- **[AWS ECS Fargate](docs/deployment/ecs.md)**: Serverless containers with Terraform
{% endif -%}
{% if 'docker' in deployment_targets -%}
- **[Docker](docs/deployment/docker.md)**: Universal containerization
{% endif -%}
{% if 'aws-ec2-ansible' in deployment_targets -%}
- **[AWS EC2](docs/deployment/aws-ec2.md)**: Ansible-automated with Caddy
{% endif -%}
{% if 'kubernetes' in deployment_targets -%}
- **[Kubernetes](docs/deployment/kubernetes.md)**: Helm + Kustomize for GitOps
{% endif %}
See [Deployment Overview](docs/deployment/overview.md) for platform comparison and decision guide.

## Documentation

Full documentation is available in the `docs/` directory and can be built with MkDocs:

```bash
just docs-serve
```

Visit http://localhost:8000 to view the documentation.

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the {{ license }} License - see the [LICENSE](LICENSE) file for details.

## Credits

Built with [django-keel](https://github.com/CuriousLearner/django-keel) ðŸš¢
