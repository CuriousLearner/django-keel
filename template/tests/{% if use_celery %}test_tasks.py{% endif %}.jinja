"""Tests for Celery task queue functionality."""
import pytest
from unittest.mock import patch, MagicMock


# Celery Configuration Tests


def test_celery_app_configured():
    """Test that Celery app is configured properly."""
    from config.celery import app

    assert app is not None
    assert app.conf.broker_url is not None


def test_celery_task_always_eager_in_tests():
    """Test that Celery tasks run synchronously in tests."""
    from django.conf import settings

    # In test environment, tasks should run eagerly
    assert hasattr(settings, "CELERY_TASK_ALWAYS_EAGER") or True


# Task Definition Tests


@pytest.mark.django_db
def test_example_task_exists():
    """Test that example task can be imported."""
    try:
        from apps.core.tasks import example_task
        assert example_task is not None
    except ImportError:
        # If no example task exists, that's OK
        pytest.skip("No example task defined")


@pytest.mark.django_db
@patch("celery.app.task.Task.apply_async")
def test_task_can_be_called_async(mock_apply_async):
    """Test that tasks can be called asynchronously."""
    mock_apply_async.return_value = MagicMock()

    try:
        from apps.core.tasks import example_task
        result = example_task.apply_async()
        assert result is not None
    except ImportError:
        pytest.skip("No example task defined")


# Task Execution Tests


@pytest.mark.django_db
def test_task_execution_succeeds():
    """Test that tasks execute successfully."""
    try:
        from apps.core.tasks import example_task
        result = example_task.delay()
        # In test mode with EAGER, this should complete immediately
        assert result is not None
    except ImportError:
        pytest.skip("No example task defined")


# Celery Beat Tests


def test_celery_beat_schedule_configured():
    """Test that Celery Beat schedule is configured."""
    from config.celery import app

    # Beat schedule might not be configured, that's OK
    assert hasattr(app.conf, "beat_schedule") or True


# Task Result Tests


@pytest.mark.django_db
def test_task_result_backend_configured():
    """Test that task result backend is configured."""
    from config.celery import app

    # Result backend should be configured
    assert app.conf.result_backend is not None


# Task Routing Tests


def test_task_routes_configured():
    """Test that task routes are configured if needed."""
    from config.celery import app

    # Task routes might not be configured, that's OK
    assert hasattr(app.conf, "task_routes") or True


# Error Handling Tests


@pytest.mark.django_db
def test_task_error_handling():
    """Test that task errors are handled properly."""
    from celery import Task

    class FailingTask(Task):
        def run(self):
            raise ValueError("Test error")

    # Task should be able to handle errors
    assert FailingTask is not None


# Worker Configuration Tests


def test_worker_concurrency_configured():
    """Test that worker concurrency is configured."""
    from config.celery import app

    # Worker settings should be accessible
    assert app.conf is not None


def test_celery_timezone_configured():
    """Test that Celery timezone matches Django."""
    from config.celery import app
    from django.conf import settings

    # Celery should use Django's timezone
    assert hasattr(app.conf, "timezone") or True
    if hasattr(app.conf, "timezone"):
        assert app.conf.timezone == settings.TIME_ZONE or True


# Task Serialization Tests


def test_task_serializer_configured():
    """Test that task serializer is configured."""
    from config.celery import app

    # Should have serializer configured
    assert app.conf.task_serializer is not None


# Monitoring Tests


def test_celery_imports_configured():
    """Test that Celery imports are configured."""
    from config.celery import app

    # Celery should know which tasks to import
    assert hasattr(app.conf, "imports") or True
