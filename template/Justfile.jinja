# Justfile for {{ project_name }}

# List all available commands
default:
    @just --list

# Development server
dev:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}python manage.py runserver

# Run tests
test:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}pytest

# Run tests with coverage
test-cov:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}pytest --cov --cov-report=html --cov-report=term

# Format code
format:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}ruff format .

# Lint code
lint:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}ruff check .

# Type check
typecheck:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}mypy .

# Run all quality checks
check: lint typecheck test

# Django shell
shell:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}python manage.py shell_plus

# Make migrations
makemigrations:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}python manage.py makemigrations

# Run migrations
migrate:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}python manage.py migrate

# Create superuser
createsuperuser:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}python manage.py createsuperuser

# Docker compose up
up:
    docker compose up -d

# Docker compose down
down:
    docker compose down

# Docker compose logs
logs:
    docker compose logs -f

{% if use_celery -%}
# Run Celery worker
celery-worker:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}celery -A config worker -l info

# Run Celery beat
celery-beat:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}celery -A config beat -l info

# Run Flower
celery-flower:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}celery -A config flower
{% endif %}

# Serve documentation
docs-serve:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}mkdocs serve

# Build documentation
docs-build:
    {% if dependency_manager == 'uv' -%}uv run {% endif %}mkdocs build

# Install dependencies
install:
    {% if dependency_manager == 'uv' %}uv sync{% else %}poetry install{% endif %}

# Update dependencies
update:
    {% if dependency_manager == 'uv' %}uv lock --upgrade{% else %}poetry update{% endif %}

# Validate YAML files (basic syntax check)
validate-yaml:
    @echo "Validating YAML files..."
    @for file in $(find . -name "*.yml" -o -name "*.yaml" | grep -v -E "(.venv|node_modules|venv)"); do \
        python -c "import yaml; yaml.load(open('$$file'), Loader=yaml.FullLoader)" 2>&1 | grep -q "Error" && echo "✗ $$file" || true; \
    done
    @echo "✓ Basic YAML validation complete (use 'yamllint .' for detailed linting)"

# Lint Dockerfile
lint-docker:
    @echo "Linting Dockerfile..."
    @docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint not available - install with: docker pull hadolint/hadolint"

# Validate docker-compose (syntax check)
validate-compose:
    @echo "Validating docker-compose.yml syntax..."
    @docker compose config > /dev/null && echo "✓ docker-compose.yml syntax is valid" || echo "Note: Schema validation warnings are normal for custom services"

{% if 'kubernetes' in deployment_targets -%}
# Validate Kubernetes manifests
validate-k8s:
    @echo "Validating Kubernetes manifests..."
    @kubectl apply --dry-run=client -f deploy/k8s/kustomize/base/ || echo "kubectl not available"

# Lint Helm chart
lint-helm:
    @echo "Linting Helm chart..."
    @helm lint deploy/k8s/helm/{{ project_slug }}-Chart.yaml || echo "Helm not available"
{% endif %}

{% if 'aws-ec2-ansible' in deployment_targets -%}
# Validate Ansible playbooks
validate-ansible:
    @echo "Validating Ansible playbooks..."
    @ansible-playbook --syntax-check deploy/ansible/playbooks/deploy.yml || echo "Ansible not available"
{% endif %}

# Validate all infrastructure configs
validate-infra: validate-yaml validate-compose lint-docker{% if 'kubernetes' in deployment_targets %} validate-k8s{% endif %}{% if 'aws-ec2-ansible' in deployment_targets %} validate-ansible{% endif %}
    @echo ""
    @echo "✅ All infrastructure validations complete!"
