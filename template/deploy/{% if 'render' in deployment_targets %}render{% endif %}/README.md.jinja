# Render Deployment

Deploy {{ project_name }} to Render for simple, scalable hosting with auto-deploy from Git.

## Overview

Render provides:

- **Simple Deployment**: Deploy from GitHub with one click
- **Auto Deploy**: Automatic deploys on git push
- **Managed Services**: PostgreSQL, Redis included
- **SSL/HTTPS**: Automatic SSL certificates
- **Free Tier**: Generous free tier for hobby projects
- **Zero Config**: Works out of the box

## Prerequisites

- Render account ([Sign up](https://dashboard.render.com/register))
- GitHub/GitLab repository with your code
- Code pushed to main branch

## Quick Start

### Method 1: Blueprint (Recommended)

The `render.yaml` file in your project root defines all services.

1. **Push to GitHub**
   ```bash
   git push origin main
   ```

2. **Connect to Render**
   - Go to [Render Dashboard](https://dashboard.render.com/)
   - Click "New" → "Blueprint"
   - Connect your GitHub repository
   - Select `render.yaml`
   - Click "Apply"

Render will automatically create:
- Web service (Django app)
- PostgreSQL database
{% if cache == 'redis' -%}
- Redis instance
{% endif -%}
{% if background_tasks in ['celery', 'both'] -%}
- Celery worker (if enabled)
{% endif -%}

### Method 2: Manual Setup

1. **Create PostgreSQL Database**
   - New → PostgreSQL
   - Name: `{{ project_slug }}-db`
   - Plan: Free
   - Create

2. **Create Web Service**
   - New → Web Service
   - Connect repository
   - Name: `{{ project_slug }}`
   - Runtime: Python
   - Build Command: `./deploy/render/build.sh`
   - Start Command: `gunicorn config.wsgi:application`
   - Plan: Free or Starter

3. **Set Environment Variables** (see below)

## Configuration

### Environment Variables

Set these in Render Dashboard under "Environment":

**Required:**
```
DJANGO_SETTINGS_MODULE=config.settings.prod
PYTHON_VERSION={{ python_version }}
SECRET_KEY=<auto-generated>
DEBUG=False
ALLOWED_HOSTS={{ project_slug }}.onrender.com
DATABASE_URL=<auto-connected>
```

{% if cache == 'redis' -%}
**Redis (if using):**
```
REDIS_URL=<auto-connected>
```
{% endif -%}

{% if use_sentry -%}
**Sentry (if using):**
```
SENTRY_DSN=<your-sentry-dsn>
```
{% endif -%}

{% if media_storage == 'aws-s3' -%}
**AWS S3 (for media files):**
```
AWS_ACCESS_KEY_ID=<your-key>
AWS_SECRET_ACCESS_KEY=<your-secret>
AWS_STORAGE_BUCKET_NAME={{ project_slug }}-media
AWS_S3_REGION_NAME=us-east-1
```
{% endif -%}

### Build Script

The `deploy/render/build.sh` script runs on each deploy:

```bash
#!/usr/bin/env bash
set -o errexit

# Install dependencies
{% if dependency_manager == 'uv' -%}
uv sync --frozen
{% else -%}
pip install -r requirements.txt
{% endif -%}

# Collect static files
python manage.py collectstatic --noinput

# Run migrations
python manage.py migrate --noinput
```

Make it executable:
```bash
chmod +x deploy/render/build.sh
```

### Database

Render PostgreSQL is automatically configured.

**Access Database:**
```bash
# Get connection string from Render dashboard
# Or use Render's built-in shell:
# Dashboard → Database → Shell
```

**Backup:**
- Render automatically backs up PostgreSQL databases
- Free tier: 7 days retention
- Paid tiers: 30+ days retention

### Static Files

Whitenoise serves static files (already configured):

```python
# settings/prod.py
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # After SecurityMiddleware
    ...
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
```

### Media Files

For user uploads, use AWS S3 (recommended) or Render Disks.

#### Option 1: AWS S3 (Recommended)

Already configured if you selected `aws-s3` storage.

#### Option 2: Render Disks

```yaml
# In render.yaml
services:
  - type: web
    name: {{ project_slug }}
    disk:
      name: {{ project_slug }}-media
      mountPath: /app/media
      sizeGB: 1
```

**Note**: Disks persist across deploys but are single-instance.

## Deployment

### Automatic Deploys

Render automatically deploys when you push to main:

```bash
git add .
git commit -m "Update feature"
git push origin main
```

Watch deployment progress in Render Dashboard.

### Manual Deploys

```bash
# From Render Dashboard:
# Services → {{ project_slug }} → Manual Deploy → Deploy latest commit
```

### Deploy from Branch

```yaml
# In render.yaml, change branch:
branch: develop
```

## Scaling

### Vertical Scaling (Instance Size)

```yaml
# In render.yaml
plan: starter   # $7/month - 512 MB RAM
# plan: standard  # $25/month - 2 GB RAM
# plan: pro       # $85/month - 4 GB RAM
```

Or update in Dashboard: Settings → Instance Type

### Horizontal Scaling (Multiple Instances)

Available on Standard plans and above:

```bash
# Dashboard: Settings → Scaling
# Set: Min Instances = 2, Max Instances = 5
```

## Monitoring

### Logs

```bash
# Real-time logs in Dashboard:
# Services → {{ project_slug }} → Logs

# Filter logs:
# - All logs
# - Build logs
# - Deploy logs
```

### Metrics

Available in Dashboard:
- CPU usage
- Memory usage
- Request count
- Response times
- Status codes

### Health Checks

Render monitors `/health/` endpoint:

```yaml
# In render.yaml
healthCheckPath: /health/
```

## Custom Domain

### Add Domain

1. **Add Custom Domain**
   - Dashboard → Service → Settings
   - Custom Domains → Add Custom Domain
   - Enter: `{{ project_slug }}.com`

2. **Update DNS**
   ```
   CNAME www.{{ project_slug }}.com → {{ project_slug }}.onrender.com
   ALIAS {{ project_slug }}.com → {{ project_slug }}.onrender.com
   ```

3. **Update ALLOWED_HOSTS**
   ```
   ALLOWED_HOSTS={{ project_slug }}.com,www.{{ project_slug }}.com
   ```

Render automatically provisions SSL certificates.

## Background Tasks

{% if background_tasks in ['celery', 'both'] -%}
### Celery Workers

The `render.yaml` includes Celery worker configuration.

**Worker Service:**
```yaml
- type: worker
  name: {{ project_slug }}-celery-worker
  startCommand: "celery -A config worker -l info"
```

**Celery Beat** (periodic tasks):
Create separate worker service:
```yaml
- type: worker
  name: {{ project_slug }}-celery-beat
  startCommand: "celery -A config beat -l info"
```

{% endif -%}
{% if background_tasks in ['temporal', 'both'] -%}
### Temporal Workers

For Temporal, create a worker service:

```yaml
- type: worker
  name: {{ project_slug }}-temporal-worker
  startCommand: "python manage.py run_temporal_worker"
```

Note: You'll need to deploy Temporal server separately (Temporal Cloud recommended).

{% endif -%}

## CI/CD

Render automatically deploys on git push. No additional CI/CD needed!

### GitHub Actions (Optional)

For additional checks before deploy:

```yaml
name: Test before deploy

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '{{ python_version }}'
      - run: pip install -r requirements.txt
      - run: pytest
```

## Development vs Production

### Preview Environments

Render creates preview environments for pull requests:

1. **Enable in Settings**
   - Dashboard → Service → Settings
   - Pull Request Previews → Enable

2. **Create PR**
   - Render automatically creates preview URL
   - Separate database for each preview

### Staging Environment

Create separate service:

```yaml
# render-staging.yaml
services:
  - type: web
    name: {{ project_slug }}-staging
    branch: develop
```

## Cost Optimization

Tips for reducing costs:

1. **Free Tier**: Good for hobby projects
   - Web service spins down after 15 min inactivity
   - PostgreSQL: 1 GB free
   - 750 hours/month free

2. **Starter Plan** ($7/month):
   - Always-on service
   - Better performance
   - No spin-down

3. **Database**: Start with free tier (1 GB)

4. **Media Files**: Use S3 instead of Render Disks

5. **Caching**: Add Redis for performance

### Free Tier Limitations

- Services spin down after 15 minutes of inactivity
- 90-second cold start
- PostgreSQL limited to 1 GB
- Best for development/staging

## Troubleshooting

### Build Fails

```bash
# Check build logs in Dashboard
# Common issues:
# - Missing requirements.txt
# - build.sh not executable
# - Migration errors
```

Fix:
```bash
chmod +x deploy/render/build.sh
git add deploy/render/build.sh
git commit -m "Make build script executable"
git push
```

### Service Won't Start

Check:
- Start command is correct
- All environment variables set
- Database is connected
- Logs for error messages

### Database Connection

```bash
# Verify DATABASE_URL is set
# Dashboard → Environment → DATABASE_URL

# Test connection in logs:
# Should see: "Applying migrations..."
```

### Slow Cold Starts (Free Tier)

Free tier services spin down after 15 minutes:
- First request takes ~30-90 seconds
- Upgrade to Starter plan ($7/month) for always-on

## Cleanup

To delete your app:

1. **Delete Services**
   - Dashboard → Service → Settings → Delete Service

2. **Delete Database**
   - Dashboard → Database → Settings → Delete Database

## Resources

- [Render Django Guide](https://render.com/docs/deploy-django)
- [Render Docs](https://render.com/docs)
- [Render Pricing](https://render.com/pricing)
- [Render Status](https://status.render.com/)
- [Django on Render Tutorial](https://testdriven.io/blog/django-render/)

## Support

- [Render Community](https://community.render.com/)
- [Render Status Page](https://status.render.com/)
- Email: support@render.com
